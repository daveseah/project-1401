<snippet>
	<content><![CDATA[
/* game-main */
define ([
	'1401/system/debug',
	'1401/settings',
	'1401/system/renderer',
	'1401/objects/sysloop'
], function (
	DBG,
	SETTINGS,
	RENDERER,
	SYSLOOP
) {

	var DEBUG = false;

//////////////////////////////////////////////////////////////////////////////
/****************************************************************************\

	MASTER GAME INSTANCE (MGI)


//////////////////////////////////////////////////////////////////////////////
/** MODULE PRIVATE VARIABLES ************************************************/

	var m_viewmodel;	// durandal viewmodel for databinding, system props
	var _is_running = false;


//////////////////////////////////////////////////////////////////////////////
/** SYSLOOP API *************************************************************/

	// create a game loop handler object with all necessary functions
	var ${2:GAME} = SYSLOOP.InitializeGame('$2-Main');


///	CONSTRUCTION EVENTS ///////////////////////////////////////////////////////
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/*/	MGI.Connect is fired AFTER all other SYSLOOP instances complete
/*/	$2.SetHandler( 'Connect', function ( VM ) {
		console.group("$2: Connecting!");
		m_viewmodel = VM;
		console.groupEnd();
	});
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/*/	MGI.Initialize is fired AFTER all other SYSLOOP instances complete
/*/	$2.SetHandler( 'Initialize', function () {
		console.group('$2: Initializing!');
		var parm = {
			attachTo: '#container',		// WebGL attaches to this
			renderWidth: 1000,			// width of render context
			renderHeight: 1000,			// height of render context
			worldUnits: 1000			// world units to fit in shortest dim
		};
		RENDERER.Initialize ( parm );
		// XRENDERER.SetShellContainerPadding(10);
		// XSETTINGS.AppViewModel().screen_autosize(2);
		console.groupEnd();
	});
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/*/	MGI.Construct is fired AFTER all other SYSLOOP instances complete
/*/	$2.SetHandler( 'Construct', function () {
		console.group('$2: Constructing!');
		// Initialize values specific to overall gameloop, such
		// as zone or level management
		console.groupEnd();
	});
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/*/	MGI.Start is fired AFTER all other SYSLOOP instances complete
/*/	$2.SetHandler( 'Start', function ( int_ms ) {
		console.group('$2: Starting!');
		console.log(this.name,'Start @ '+int_ms.zeroPad(8));
		if (SETTINGS("renderer").autorender) {
			console.log("* Using simulation-independent auto-rendering");
			RENDERER.AutoRender();
		}
		_is_running = true;
		console.groupEnd();
	});


/// MASTER GAME LOOP //////////////////////////////////////////////////////////
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/*/	This is the top-level system update loop. There is only one in the entire
	game (note: 'GameStep' is not used anywhere else). This GameStep handler
	is allowed only when SYSLOOP.InitializeGame() is created. 
/*/	$2.SetHandler( 'GameStep', function ( int_ms ) {
		/* game pause control */
		/* game logic */
		SYSLOOP.GetInputAll(ms);
		/* physics step in autosys */
		SYSLOOP.PiecesUpdate (ms);		// all pieces update
		SYSLOOP.ModulesUpdate (ms);		// modules update (us included)
		SYSLOOP.ModulesThink (ms);		// modules AI think (us included)
		SYSLOOP.PiecesThink (ms);		// all pieces think
		SYSLOOP.ModulesOverThink (ms);	// modules AI override (us included)
		SYSLOOP.PiecesExecute (ms);		// all pieces execute
		SYSLOOP.ModulesExecute (ms);	// modules AI execute (us included)
		/* other ui updates */
		/* game level management */
	}


///////////////////////////////////////////////////////////////////////////////
/** PUBLIC API ***************************************************************/
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/*/	Report the run status of the game to master
/*/	$2.IsRunning = function () { return _is_running; };


///////////////////////////////////////////////////////////////////////////////
/** PRIVATE MODULE FUNCTIONS *************************************************/

	function m_PrivateFunction () {
	};	
	

///////////////////////////////////////////////////////////////////////////////
/** RETURN MODULE ************************************************************/
	return $2;

});

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>/1401gamemain</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope></scope>
	<description>1401 main game</description>
</snippet>