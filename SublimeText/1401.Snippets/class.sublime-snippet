<snippet>
	<content><![CDATA[
/* ${1:class}.js */
define ([
//	'objects/parentclass'				// uncomment to inherit
], function ( 
//	${3:PARENT}							// uncomment to inherit
) {

	var DBGOUT = true;

/*****************************************************************************\

	DESCRIPTION OF ${2:CLASS}
	What does this class do?
	$0

	---
	NOTES ON CLASS IMPLEMENTATION

	To use this class, import it into a module and then invoke the new
	operator on it. Classes should not import each other. The nomenclature is
	based on C++ style conventions (e.g. static, private, public) but is only
	an approximation using Javascript objects prototypes and closures. There
	is no type checking or symbol validation...it's Javascript, so beware!

	The 'inheritsFrom' and 'method' declarations are syntactic sugard defined
	in 1401/js-extend/oop.js.


/** CLASS DECLARATION ********************************************************/

///	CONSTRUCTOR & INHERITANCE /////////////////////////////////////////////////
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	function $2 ( parameter ) {
		// call the parent constructor
		// $3.call (this, parameter);	// uncomment to inherit

		// define incrementing instance property
		this.id = m_id_prefix + (m_id_counter++);
		// initialize instance property to "enum"
		this.mode = $2.MODE_1;
	}
	/* inheritance */
	// $2.inheritsFrom($3);		// uncomment to inherit

///	"ENUMERATION" /////////////////////////////////////////////////////////////
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	$2.MODE_1 = "mode1";
	$2.MODE_2 = "mode2";
	$2.MODE_3 = "mode3";

///	"PRIVATE STATIC CLASS VARIABLES" //////////////////////////////////////////
///	can be referenced in instance methods thanks to closures
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	var m_id_counter = 0;
	var m_id_prefix  = 'id';

///	"PUBLIC STATIC CLASS METHODS" /////////////////////////////////////////////
/// Functions attached to the constructor can access any "static" value
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	$2.GetCounter = function () {
		return m_id_counter;
	};

///	"PRIVATE STATIC CLASS METHODS" ////////////////////////////////////////////
///	can be referenced in instance methods thanks to closures
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	function PRI_PrintObjectId ( instance ) {
		// access passed instance method
		console.info( "id of passed instance is:", instance.MyId() );
		// access "private class variables"
		console.info( "next created id will be", m_id_counter );
	}

///	PUBLIC CLASS INSTANCE METHODS /////////////////////////////////////////////
/// remember that instance properties should be defined in the construtor
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/*/	Demo showing access to both instance and private methods and variables
/*/	$2.method('Test', function () {
		// print some debugging information for this instance
		console.group("1401 MCLASS TEST");
		PRI_PrintObjectId( this );
		var out = this.MyId();
		console.groupEnd();
		return "instance test returns: "+out;
	});
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	$2.method('MyId', function ( str ) {
		// access instance properties with 'this'
		return this.id;
	});

///	"PUBLIC STATIC $2 METHODS" /////////////////////////////////////////////
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	$2.MyStaticFunction = function () {};

///	OPTIONAL: IMPLEMENT SINGLETON /////////////////////////////////////////////
///	NOTE: These are invoked like "static" methods e.g. $2.GetSingleton()
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	var m_singleton;
/*/	Call this at the appropriate time, or uncomment the auto-initialization 
	line just before returning the constructor at the bottom of the module.
/*/	$2.InitializeSingleton = function ( parameter ) {
		if (!m_singleton) m_singleton = new $2( parameter );
		return m_singleton; 
	};
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/*/	Return the singleton
/*/	$2.GetSingleton = function () { 
		if (m_singleton!==undefined) return m_singleton; 
		throw new Error ("Must call $2.InitializeSingleton() first");
	};


///////////////////////////////////////////////////////////////////////////////
/** RETURN CONSTRUCTOR *******************************************************/
	// $2.InitializeSingleton();		// optional early singleton init
	return $2;

});

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>/1401class</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope></scope>
	<description>1401 class module</description>
</snippet>